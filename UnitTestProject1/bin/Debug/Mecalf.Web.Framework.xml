<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mecalf.Web.Framework</name>
    </assembly>
    <members>
        <member name="T:Mecalf.Web.Framework.ClientBuilder.TemplateInterpreter">
            <summary>
            模板解释器,TODO:后续考虑进行重构,并加入类似于合并路由注册的功能.
            </summary>
        </member>
        <member name="P:Mecalf.Web.Framework.ClientBuilder.TemplateInterpreter.Encoding">
            <summary>
            编码方案
            </summary>
        </member>
        <member name="P:Mecalf.Web.Framework.ClientBuilder.TemplateInterpreter.Values">
            <summary>
            解释器中的所有变量
            </summary>
        </member>
        <member name="P:Mecalf.Web.Framework.ClientBuilder.TemplateInterpreter.DtoTypes">
            <summary>
            解释器中所有的Dto
            </summary>
        </member>
        <member name="M:Mecalf.Web.Framework.ClientBuilder.TemplateInterpreter.FuncCall(System.String,System.String[])">
            <summary>
            函数调用,调用解析到的函数
            </summary>
            <param name="name"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.ClientBuilder.TemplateInterpreter.CamelCase(System.String)">
            <summary>
            获取字符串并将字符串转换成小驼峰格式的字符串,注意,仅仅是将第一个字母变小写,其他不变!
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Mecalf.Web.Framework.ClientBuilder.TemplateInterpreter.Namespace(System.String)">
            <summary>
             获取字符串并将字符串转换成小驼峰格式的字符串,注意,这将会把字符串分割,并通过.连接,同时将.后的第一个字母小写
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Mecalf.Web.Framework.ClientBuilder.TemplateInterpreter.LowerStr(System.String)">
            <summary>
            变量读取,从环境中读取指定的属性
            </summary>
        </member>
        <member name="M:Mecalf.Web.Framework.ClientBuilder.TemplateInterpreter.ValueGet(System.String)">
            <summary>
            变量读取,从环境中读取指定的属性
            </summary>
        </member>
        <member name="M:Mecalf.Web.Framework.ClientBuilder.TemplateInterpreter.ValueDel(System.String)">
            <summary>
            变量读取,从环境中读取指定的属性
            </summary>
        </member>
        <member name="M:Mecalf.Web.Framework.ClientBuilder.TemplateInterpreter.ValueSet(System.String,System.String)">
            <summary>
            变量值设置,设置环境中指定变量的值
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Mecalf.Web.Framework.ClientBuilder.TemplateInterpreter.HandleTag(System.String)">
            <summary>
            处理标签内容
            </summary>
            <param name="tagContent"></param>
        </member>
        <member name="M:Mecalf.Web.Framework.ClientBuilder.TemplateInterpreter.SetCrudService``6(Mecalf.Web.Framework.Services.ICrudAppService{``0,``1,``2,``3,``4,``5})">
            <summary>
            配置需要生成页面的Crud服务
            </summary>
            <typeparam name="TEntityDto"></typeparam>
            <typeparam name="TPrimaryKey"></typeparam>
            <typeparam name="TCreateInput"></typeparam>
            <typeparam name="TUpdateInput"></typeparam>
            <typeparam name="TGetListInput"></typeparam>
            <param name="service"></param>
        </member>
        <member name="M:Mecalf.Web.Framework.ClientBuilder.TemplateInterpreter.Build(System.String,System.String)">
            <summary>
            开始生成页面
            </summary>
        </member>
        <member name="M:Mecalf.Web.Framework.ClientBuilder.TemplateInterpreter.BuildMany(System.String,System.String)">
            <summary>
            批量获取模板和生成页面
            </summary>
            <param name="pathDir"></param>
            <param name="saveDir"></param>
        </member>
        <member name="M:Mecalf.Web.Framework.ClientBuilder.TemplateInterpreter.BuildManyInternal(System.String,System.String)">
            <summary>
            批量获取模板和生成页面
            </summary>
        </member>
        <member name="M:Mecalf.Web.Framework.ClientBuilder.TemplateInterpreter.MainLoop(System.IO.BinaryReader,System.IO.BinaryWriter,System.Boolean)">
            <summary>
            主循环，从头到尾扫描模板流。遇到 {@ 时直接调用相关的解释方法,然后解析接下来的内容.直到遇到 @} 后返回到主循环中.
            </summary>
        </member>
        <member name="M:Mecalf.Web.Framework.ClientBuilder.TemplateInterpreter.ReadDtoSeeTemplate">
            <summary>
            读取实体属性遍历时,为每个属性生成内容时使用的模板
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.ClientBuilder.TemplateInterpreter.DtoSee(System.String,System.String)">
            <summary>
            遍历Dto中的所有属性,并用指定的模板进行显示
            </summary>
            <param name="dtoName">Dto的名称</param>
            <param name="containsId">遍历的属性中,是否需要包含Id字段</param>
        </member>
        <member name="T:Mecalf.Web.Framework.Services.CrudAppService`2">
            <inheritdoc />
            <summary>
            按照RestFul规范设计的通用的增删改查的API接口
            </summary>
            <typeparam name="TEntity">数据库实体</typeparam>
            <typeparam name="TEntityDto">实体的DTO,必须能和 <typeparamref name="TEntity" /> 相互映射</typeparam>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`2.#ctor(Abp.Domain.Repositories.IRepository{`0,System.Int32})">
            <inheritdoc />
            <summary>
            构造方法，暂无特殊说明
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:Mecalf.Web.Framework.Services.CrudAppService`3">
            <inheritdoc />
            <summary>
            按照RestFul规范设计的通用的增删改查的API接口
            </summary>
            <typeparam name="TEntity">数据库实体</typeparam>
            <typeparam name="TEntityDto">实体的DTO,必须能和 <typeparamref name="TEntity" /> 相互映射</typeparam>
            <typeparam name="TPrimaryKey">实体的主键</typeparam>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`3.#ctor(Abp.Domain.Repositories.IRepository{`0,`2})">
            <summary>
            构造方法，暂无特殊说明
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:Mecalf.Web.Framework.Services.CrudAppService`5">
            <summary>
            按照RestFul规范设计的通用的增删改查的API接口
            </summary>
            <typeparam name="TEntity">数据库实体</typeparam>
            <typeparam name="TEntityDto">实体的DTO</typeparam>
            <typeparam name="TPrimaryKey">实体的主键</typeparam>
            <typeparam name="TCreateInput">创建实体时的输入，必须能够映射到<typeparamref name="TEntity"/> </typeparam>
            <typeparam name="TUpdateInput">更新实体时的输入，必须能够映射到<typeparamref name="TEntity"/> </typeparam>
            <typeparam name="TListEntityDto">获取所有数据时的输出</typeparam>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`5.#ctor(Abp.Domain.Repositories.IRepository{`0,`2})">
            <inheritdoc />
            <summary>
            构造方法，暂无特殊说明
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:Mecalf.Web.Framework.Services.CrudAppService`6">
            <summary>
            按照RestFul规范设计的通用的增删改查的API接口
            </summary>
            <typeparam name="TEntity">数据库实体</typeparam>
            <typeparam name="TEntityDto">实体的DTO</typeparam>
            <typeparam name="TPrimaryKey">实体的主键</typeparam>
            <typeparam name="TCreateInput">创建实体时的输入，必须能够映射到<typeparamref name="TEntity"/> </typeparam>
            <typeparam name="TUpdateInput">更新实体时的输入，必须能够映射到<typeparamref name="TEntity"/> </typeparam>
            <typeparam name="TGetListInput">获取所有数据时的输入</typeparam>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`6.#ctor(Abp.Domain.Repositories.IRepository{`0,`2})">
            <inheritdoc />
            <summary>
            构造方法，暂无特殊说明
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:Mecalf.Web.Framework.Services.CrudAppService`7">
            <summary>
            按照RestFul规范设计的通用的增删改查的API接口
            </summary>
            <typeparam name="TEntity">数据库实体</typeparam>
            <typeparam name="TEntityDto">实体的DTO</typeparam>
            <typeparam name="TPrimaryKey">实体的主键</typeparam>
            <typeparam name="TCreateInput">创建实体时的输入，必须能够映射到<typeparamref name="TEntity"/> </typeparam>
            <typeparam name="TUpdateInput">更新实体时的输入，必须能够映射到<typeparamref name="TEntity"/> </typeparam>
            <typeparam name="TGetListInput">获取所有数据时的输入</typeparam>
            <typeparam name="TListEntityDto">获取所有数据时的数据输出</typeparam>
        </member>
        <member name="F:Mecalf.Web.Framework.Services.CrudAppService`7._repository">
            <summary>
            存放实体的仓储
            </summary>
        </member>
        <member name="P:Mecalf.Web.Framework.Services.CrudAppService`7.NoPermissionErrorCode">
            <summary>
            用户没有权限进行当前操作时返回的错误代码
            </summary>
        </member>
        <member name="P:Mecalf.Web.Framework.Services.CrudAppService`7.IsGetCheckManagePermission">
            <summary>
            设置或获取在获取数据时是否检查管理权限。如果设置为真，列表只会列出自己创建的记录。否则列出所有符合条件的记录
            </summary>
        </member>
        <member name="P:Mecalf.Web.Framework.Services.CrudAppService`7.CreatePermissionName">
            <summary>
            创建实体的权限名称
            </summary>
        </member>
        <member name="P:Mecalf.Web.Framework.Services.CrudAppService`7.UpdatePermissionName">
            <summary>
            更新实体的权限名称
            </summary>
        </member>
        <member name="P:Mecalf.Web.Framework.Services.CrudAppService`7.DeletePermissionName">
            <summary>
            删除实体的权限名称
            </summary>
        </member>
        <member name="P:Mecalf.Web.Framework.Services.CrudAppService`7.GetPermissionName">
            <summary>
            获取实体的权限名称
            </summary>
        </member>
        <member name="P:Mecalf.Web.Framework.Services.CrudAppService`7.GetListPermissionName">
            <summary>
            批量获取实体的权限名称
            </summary>
        </member>
        <member name="P:Mecalf.Web.Framework.Services.CrudAppService`7.ManagePermissionName">
            <summary>
            管理权限的权限名称,只有拥有这项权限的用户能修改其他用户的数据
            </summary>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`7.CheckCreatePermission">
            <summary>
            检查当前用户是否有创建实体的权限
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`7.CheckUpdatePermission">
            <summary>
            检查当前用户是否有更新实体的权限
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`7.CheckDeletePermission">
            <summary>
            检查当前用户是否有删除实体的权限
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`7.CheckGetPermission">
            <summary>
            检查当前用户是否有获取实体信息的权限
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`7.CheckGetListPermission">
            <summary>
            检查当前用户是否有批量获取实体的权限
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`7.CheckManagePermission">
            <summary>
            检查当前用户是否有管理所有实体的权限
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`7.CheckPermission(System.String)">
            <summary>
            检查当前用户是否有指定的权限
            </summary>
            <param name="permissionName"></param>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`7.#ctor(Abp.Domain.Repositories.IRepository{`0,`2})">
            <inheritdoc />
            <summary>
            构造方法，暂无特殊说明
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`7.Create(`3)">
            <inheritdoc />
            <summary>
            创建一个指定类型的对象并保存到数据库中
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`7.Delete(System.Collections.Generic.List{`2})">
            <summary>
            从系统中删除所有给定Id的记录
            </summary>
            <param name="input">需要删除的Id的数组</param>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`7.Update(`4)">
            <inheritdoc />
            <summary>
            在系统中更新指定的记录（单个）
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`7.GetList(`5)">
            <inheritdoc />
            <summary>
            从系统中读取满足给定条件的所有的数据记录
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`7.Get(`2)">
            <summary>
            获取指定Id的数据记录
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`7.Get_Internal(`2)">
            <summary>
            获取指定Id的数据记录，实际执行操作的方法。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`7.GetByIds(System.Collections.Generic.List{`2})">
            <summary>
            获取指定Id的数据记录
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`7.GetAllIncluding">
            <summary>
            将需要的导航的属性包含进来
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`7.FilterListByManagePermission(System.Linq.IQueryable{`0})">
            <summary>
            过滤获取到的数据.如果用户没有管理权限.则只能获取到自己创建的记录.可以通过重载该方法来修改过滤规则
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`7.GetRepository">
            <summary>
            获取仓储。除了<see cref="M:Mecalf.Web.Framework.Services.CrudAppService`7.GetAllIncluding"/>以外，其他的所有方法中读取仓储数据都应该直接或间接通过这个方法。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`7.OperationDenied">
            <summary>
            由于权限问题,请求已被拒绝!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`7.UnhandledException(System.Exception)">
            <summary>
            由于系统出现未处理的异常!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`7.NotFoundException(`2)">
            <summary>
            找不到给定的记录,操作失败!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`7.Failed(System.String,System.Int32)">
            <summary>
            由于业务逻辑上不允许当前操作,操作失败!!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`7.CreateFilterQuery(`5)">
            <summary>
            根据输入的条件，筛选数据,子类可以在需要的时候重写这个方法来对查询的数据进行过滤
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppService`7.Get_Paging(System.Linq.IQueryable{`0},Abp.Application.Services.Dto.PagedAndSortedResultRequestDto)">
            <summary>
            查询数据中的部分功能：对查询到的结果进行分页处理
            </summary>
            <param name="result">需要分页的数据</param>
            <param name="paging">分页参数</param>
            <returns></returns>
        </member>
        <member name="T:Mecalf.Web.Framework.Services.ICrudAppService`1">
            <summary>
            按照RestFul规范设计的通用的增删改查的API接口
            </summary>
            <typeparam name="TEntityDto">实体的DTO</typeparam>
        </member>
        <member name="T:Mecalf.Web.Framework.Services.ICrudAppService`2">
            <summary>
            按照RestFul规范设计的通用的增删改查的API接口
            </summary>
            <typeparam name="TEntityDto">实体的DTO</typeparam>
            <typeparam name="TPrimaryKey">实体的主键</typeparam>
        </member>
        <member name="T:Mecalf.Web.Framework.Services.ICrudAppService`4">
            <summary>
            按照RestFul规范设计的通用的增删改查的API接口
            </summary>
            <typeparam name="TEntityDto">实体的DTO</typeparam>
            <typeparam name="TPrimaryKey">实体的主键</typeparam>
            <typeparam name="TCreateInput">创建实体时的输入 </typeparam>
            <typeparam name="TUpdateInput">更新实体时的输入 </typeparam>
        </member>
        <member name="T:Mecalf.Web.Framework.Services.ICrudAppService`5">
            <summary>
            按照RestFul规范设计的通用的增删改查的API接口
            </summary>
            <typeparam name="TEntityDto">实体的DTO</typeparam>
            <typeparam name="TPrimaryKey">实体的主键</typeparam>
            <typeparam name="TCreateInput">创建实体时的输入 </typeparam>
            <typeparam name="TUpdateInput">更新实体时的输入 </typeparam>
            <typeparam name="TGetListInput">获取所有实体时的输入</typeparam>
        </member>
        <member name="T:Mecalf.Web.Framework.Services.ICrudAppService`6">
            <summary>
            按照RestFul规范设计的通用的增删改查的API接口
            </summary>
            <typeparam name="TEntityDto">实体的DTO</typeparam>
            <typeparam name="TPrimaryKey">实体的主键</typeparam>
            <typeparam name="TCreateInput">创建实体时的输入 </typeparam>
            <typeparam name="TUpdateInput">更新实体时的输入 </typeparam>
            <typeparam name="TGetListInput">获取所有实体时的输入</typeparam>
            <typeparam name="TListEntityDto">列表显示实体时的输出</typeparam>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.ICrudAppService`6.Create(`2)">
            <summary>
            创建一个指定类型的对象并保存到数据库中
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.ICrudAppService`6.Delete(System.Collections.Generic.List{`1})">
            <summary>
            从系统中删除所有给定Id的记录
            </summary>
            <param name="input">需要删除的Id的数组</param>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.ICrudAppService`6.Update(`3)">
            <summary>
            在系统中更新指定的记录（单个）
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.ICrudAppService`6.GetList(`4)">
            <summary>
            从系统中读取满足给定条件的所有的数据记录
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.ICrudAppService`6.Get(`1)">
            <summary>
            获取指定Id的数据记录
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.ICrudAppService`6.GetByIds(System.Collections.Generic.List{`1})">
            <summary>
            获取指定Id的数据记录
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
    </members>
</doc>
