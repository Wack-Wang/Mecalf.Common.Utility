<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mecalf.Web.Framework</name>
    </assembly>
    <members>
        <member name="T:Mecalf.Web.Framework.Services.CrudAppServiceBase`3">
            <summary>
            按照RestFul规范设计的通用的增删改查的API接口
            </summary>
            <typeparam name="TEntity">数据库实体</typeparam>
            <typeparam name="TEntityDto">实体的DTO,必须能和 <typeparamref name="TEntity"/> 相互映射</typeparam>
            <typeparam name="TPrimaryKey">实体的主键</typeparam>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppServiceBase`3.#ctor(Abp.Domain.Repositories.IRepository{`0,`2})">
            <summary>
            构造方法，暂无特殊说明
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:Mecalf.Web.Framework.Services.CrudAppServiceBase`4">
            <summary>
            按照RestFul规范设计的通用的增删改查的API接口
            </summary>
            <typeparam name="TEntity">数据库实体</typeparam>
            <typeparam name="TEntityDto">实体的DTO,必须能和 <typeparamref name="TEntity"/> 相互映射</typeparam>
            <typeparam name="TPrimaryKey">实体的主键</typeparam>
            <typeparam name="TGetInput">获取实体时的输入</typeparam>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppServiceBase`4.#ctor(Abp.Domain.Repositories.IRepository{`0,`2})">
            <summary>
            构造方法，暂无特殊说明
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:Mecalf.Web.Framework.Services.CrudAppServiceBase`6">
            <summary>
            按照RestFul规范设计的通用的增删改查的API接口
            </summary>
            <typeparam name="TEntity">数据库实体</typeparam>
            <typeparam name="TEntityDto">实体的DTO</typeparam>
            <typeparam name="TPrimaryKey">实体的主键</typeparam>
            <typeparam name="TCreateInput">创建实体时的输入，必须能够映射到<typeparamref name="TEntity"/> </typeparam>
            <typeparam name="TUpdateInput">更新实体时的输入，必须能够映射到<typeparamref name="TEntity"/> </typeparam>
            <typeparam name="TGetInput">获取实体时的输入</typeparam>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppServiceBase`6.#ctor(Abp.Domain.Repositories.IRepository{`0,`2})">
            <summary>
            构造方法，暂无特殊说明
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppServiceBase`6.Create(`3)">
            <summary>
            创建一个指定类型的对象并保存到数据库中
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppServiceBase`6.Delete(System.Collections.Generic.List{`2})">
            <summary>
            从系统中删除所有给定Id的记录
            </summary>
            <param name="input">需要删除的Id的数组</param>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppServiceBase`6.Update(`4)">
            <summary>
            在系统中更新指定的记录（单个）
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppServiceBase`6.Get(Mecalf.Web.Framework.Services.Dto.IGetInput{`2})">
            <summary>
            从系统中读取满足给定条件的所有的数据记录，有两种工作，一种是
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.CrudAppServiceBase`6.Get_Paging(System.Linq.IQueryable{`0},Mecalf.Web.Framework.Services.Dto.IPagedGetInput)">
            <summary>
            查询数据中的部分功能：对查询到的结果进行分页处理
            </summary>
            <param name="result">需要分页的数据</param>
            <param name="paging">分页参数</param>
            <returns></returns>
        </member>
        <member name="T:Mecalf.Web.Framework.Services.CrudAppServiceBase`6.McmsCrudServiceInner">
            <summary>
            实现基础的增删改查服务的内部类
            </summary>
        </member>
        <member name="T:Mecalf.Web.Framework.Services.Dto.ApiResult`1">
            <summary>
            API的基础返回对象
            </summary>
            <typeparam name="T">返回的数据内容的类型</typeparam>
        </member>
        <member name="P:Mecalf.Web.Framework.Services.Dto.ApiResult`1.Success">
            <summary>
            请求是否处理成功
            </summary>
        </member>
        <member name="P:Mecalf.Web.Framework.Services.Dto.ApiResult`1.Data">
            <summary>
            返回的数据
            </summary>
        </member>
        <member name="P:Mecalf.Web.Framework.Services.Dto.ApiResult`1.Msg">
            <summary>
            附加的错误信息，不出错时一般为空。
            </summary>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.Dto.ApiResult`1.#ctor(System.Boolean,`0,System.String)">
            <summary>
            默认的构造方法,默认Success为True,Data为空
            </summary>
        </member>
        <member name="T:Mecalf.Web.Framework.Services.Dto.ApiResult">
            <summary>
            API的基础返回对象（非泛型版本）
            </summary>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.Dto.ApiResult.#ctor(System.Boolean,System.Object)">
            <summary>
            默认的构造方法,默认Success为True,Data为空
            </summary>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.Dto.ApiResult.Succeed``1(``0)">
            <summary>
            返回一个代表着处理成功的Api返回结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Mecalf.Web.Framework.Services.Dto.ApiResult.Failed``1(System.String,``0)">
            <summary>
            返回一个代表着处理失败的Api返回结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Mecalf.Web.Framework.Services.Dto.IGetInput`1">
            <summary>
            获取数据的输入
            </summary>
            <typeparam name="TPrimaryKey"></typeparam>
        </member>
        <member name="P:Mecalf.Web.Framework.Services.Dto.IGetInput`1.Ids">
            <summary>
            目标记录的唯一ID
            </summary>
        </member>
        <member name="P:Mecalf.Web.Framework.Services.Dto.IGetInput`1.Paging">
            <summary>
            分页信息
            </summary>
        </member>
        <member name="T:Mecalf.Web.Framework.Services.Dto.IPagedGetInput">
            <summary>
            分页获取数据的输入
            </summary>
        </member>
        <member name="P:Mecalf.Web.Framework.Services.Dto.IPagedGetInput.Skip">
            <summary>
            跳过多少条记录
            </summary>
        </member>
        <member name="P:Mecalf.Web.Framework.Services.Dto.IPagedGetInput.Take">
            <summary>
            每一页有多少条记录
            </summary>
        </member>
        <member name="P:Mecalf.Web.Framework.Services.Dto.IPagedGetInput.OrderBy">
            <summary>
            用于排序的字段
            </summary>
        </member>
        <member name="P:Mecalf.Web.Framework.Services.Dto.IPagedGetInput.Asc">
            <summary>
            是否升序排列结果,
            </summary>
        </member>
        <member name="T:Mecalf.Web.Framework.Services.Dto.PagedAndSortedGetInput`1">
            <summary>
            排序和分页获取数据的输入信息
            </summary>
            <typeparam name="TPrimaryKey"></typeparam>
        </member>
        <member name="P:Mecalf.Web.Framework.Services.Dto.PagedAndSortedGetInput`1.Ids">
            <summary>
            目标记录的唯一ID
            </summary>
        </member>
        <member name="P:Mecalf.Web.Framework.Services.Dto.PagedAndSortedGetInput`1.Paging">
            <summary>
            分页信息
            </summary>
        </member>
    </members>
</doc>
